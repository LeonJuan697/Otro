# -*- coding: utf-8 -*-
"""Combustión.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MEoW4k490GFbHBmFcv7tuvvECDWxjlqY
"""

# Instalacion de librerias
! pip install CoolProp
# Importación de librerias
import CoolProp.CoolProp as CP # Libreria para consulta de propiedades termodinámicas
import pandas as pd # Libreria para desarrollar tablas
import numpy as np # Libreria para hacer cálculos numericos
import matplotlib.pyplot as plt # Libreria para graficar
import matplotlib.image as mpimg # Libreria para cargar imagenes
from PIL import Image # Libreria para abrir imagenes
import requests # Libreria para descargar la imagen de la url
from io import BytesIO # Libreria para leer la imagen como bytes
from scipy.optimize import fsolve # Libreria para resolver ecuaciones
from scipy.optimize import root # Libreria para resolver ecuaciones
from google.colab import files

# CICLO DE COMBUSTIÓN DE OTTO #

#COMBUSTIBLE SYNGAS 2
  # 0.1 CO2 + 0.39 CO + 0.4 H2 + 0.11 CH4 + (l * α) (O2 + 3.76 N2) : a CO2 + b H2O + c O2 + d N2
#### RELACIÓN DE EQUIVALENCIA

#### LAMBDA
def fun_combustion(phi,rc,NPM):

  l=1/phi

  #   MOLES DE CADA ESPECIE
  CO2m, COm, H2m, CH4m, O2, N2r  = 0.1, 0.39, 0.4, 0.11, 1, 3.76

  #  ATOMOS DE CARBONO EN CADA ESPECIE
  aC_CO2, aC_CO, aC_CH4 = 1, 1, 1

  #  ATOMOS DE HIDRÓGENO EN CADA ESPECIE
  aH_H2, aH_CH4, aH_H2O = 2, 4, 2

  # ATOMOS DE OXÍGENO EN CADA ESPECIE
  aO_CO2, aO_CO, aO_O2, aO_H2O = 2, 1, 2, 1

  # ATOMOS DE NITROGENO EN CADA ESPECIE
  aN_N2 = 2

  ####     BALANCE ELEMENTAL    ####
  #BALANCE DEL CARBONO
  a = ((CO2m * aC_CO2) + (COm * aC_CO) + (CH4m * aC_CH4))/aC_CO2
  ### BALANCE DEL HIDRÓGENO
  b = ((H2m * aH_H2) + (CH4m * aH_CH4))/aH_H2O
  ### BALANCE DEL OXÍGENO ESTEQUEOMETRICO
  alpha = (-(CO2m * aO_CO2) - (COm * aO_CO) + (a * aO_CO2) + (b * aO_H2O))/aO_O2
  ### BALANCE DEL OXIGENO NO ESTEQUEOMETRICO
  ci = ((CO2m*aO_CO2)+(COm*aO_CO) + (l*alpha*O2*aO_O2) - (a*aO_CO2) - (b*aO_H2O)) / aO_O2
  c = round(ci,15)
  ### BALANCE DEL NITROGENO
  dE = ((alpha * N2r) * aN_N2)/aN_N2
  ### BALANCE DEL NITROGENO NO ESTEQUEOMETRICO
  # a CO2 + b H2O + c O2 + d N2
  d=(l*alpha*N2r*aN_N2)/aN_N2
  # PARAMETROS DE ENTRADA
  T1 = 25 #°C
  P1 = 75 #kPa
  Ncil=4
  Vcil = 1.5/Ncil #L
  Vcilm3 = Vcil*0.001#m3
  Ru = 8.315 #kJ/kmol-K
  nR = CO2m + COm + H2m + CH4m + (l*alpha * (O2 + N2r))#kmol
  nP = a + b + d #kmol
  #NPM=2000#RPM
  N=NPM/60 #RPS
  #### FRACCIONES MOLARES REACTANTES ####
  ###FRACCIONES MOLARES COMBUSTIBLE
  yCO2 = CO2m/nR
  yCO = COm/nR
  yH2 = H2m/nR
  yCH4 = CH4m/nR
  #FRACCIONES MOLARES AIRE
  yO2 = (O2 * alpha*l)/nR
  yN2 = (N2r * alpha*l)/nR
  #### FRACCIONES MOLARES PRODUCTOS ####
  yCO2_p = a/nP
  yH20_p = b/nP
  yO2_p = c/nP
  yN2_p = d/nP
  #### PRESIONES PARCIALES REACTANTES EN LOS PARAMETROS DE ENTRADA ####
  PCO2 = P1 * yCO2 #kPa
  PCO = P1 * yCO #kPa
  PH2 = P1 * yH2 #kPa
  PCH4 = P1 * yCH4 #kPa
  PO2 = P1 * yO2 #kPa
  PN2 = P1 * yN2 #kPa
  ## MASAS MOLARES DE LAS ESPECIES
  M_CO2= 44.01 #Kg/Kmol
  M_CO= 28.01 #Kg/Kmol
  M_H2= 2.016 #Kg/Kmol
  M_CH4= 16.04 #Kg/kmol
  Mg = (M_CO2*CO2m) + (M_CO*COm) + (M_H2*H2m) + (M_CH4*CH4m) #kg
  #PODER CALORIFICO INFERIOR DEL COMBUSTIBLE
  PCI=16525 #kJ/kg
  #### CÁLCULO DE LA ENERGIA INTERNA TOTAL EN 1 ####
  U_CO2=CP.PropsSI('UMOLAR', 'T', T1+273.15, 'P', PCO2*1000, 'CO2') #kJ/kmol

  U_CO=CP.PropsSI('UMOLAR', 'T', T1+273.15, 'P', PCO*1000, 'CO') #kJ/Kmol

  U_H2=CP.PropsSI('UMOLAR', 'T', T1+273.15, 'P', PH2*1000, 'H2') #kJ/Kmol

  U_CH4 = CP.PropsSI('UMOLAR', 'T', T1+273.15, 'P', PCH4*1000, 'CH4')#kJ/Kmol

  U_O2 = CP.PropsSI('UMOLAR', 'T', T1+273.15, 'P', PO2*1000, 'O2') #kJ/Kmol

  U_N2 = CP.PropsSI('UMOLAR', 'T', T1+273.15, 'P', PN2*1000, 'N2') #kJ/Kmol

  Un_CO2 = U_CO2 * CO2m #kJ

  Un_CO = U_CO * COm #kJ

  Un_H2 = U_H2 * H2m #kJ

  Un_CH4 = U_CH4 * CH4m #kJ

  Un_O2 = U_O2 * (alpha*O2*l) #kJ

  Un_N2 = U_N2 * (alpha*N2r*l) #kJ

  U1 = Un_CO2 + Un_CO + Un_H2 + Un_CH4 + Un_O2 + Un_N2 #kJ

  #### CÁLCULO DE LA ENTROPIA TOTAL EN 1 ####

  S_CO2=CP.PropsSI('SMOLAR', 'T', T1+273.15, 'P', PCO2*1000, 'CO2') #kJ/Kmol-K

  S_CO = CP.PropsSI('SMOLAR', 'T', T1+273.15, 'P', PCO*1000, 'CO') #kJ/Kmol-K

  S_H2 = CP.PropsSI('SMOLAR', 'T', T1+273.15, 'P', PH2*1000, 'H2') #kJ/Kmol-K

  S_CH4 = CP.PropsSI('SMOLAR', 'T', T1+273.15, 'P', PCH4*1000, 'CH4') #kJ/Kmol-K

  S_O2 = CP.PropsSI('SMOLAR', 'T', T1+273.15, 'P', PO2*1000, 'O2') #kJ/Kmol-K

  S_N2 = CP.PropsSI('SMOLAR', 'T', T1+273.15, 'P', PN2*1000, 'N2') #kJ/Kmol-K

  Sn_CO2 = S_CO2 * CO2m #kJ/K

  Sn_CO= S_CO * COm #kJ/K

  Sn_H2 = S_H2 * H2m #kJ/K

  Sn_CH4 = S_CH4 * CH4m #kJ/K

  Sn_O2 = S_O2 * (alpha*O2*l) #kJ/K

  Sn_N2 = S_N2 * (alpha*N2r*l) #kJ/K

  S1= Sn_CO2 + Sn_CO + Sn_H2 + Sn_CH4 + Sn_O2 + Sn_N2 #kJ/K

  V1 = Ru*nR*(T1 + 273.15)/(P1) #m3
  S1,U1,V1,Vcilm3

  #### ESTADO 2 #####
  V2=V1/rc
  def fun_P2(P):
    def fun_T2(T):
      PCO2_2 = P * yCO2
      PCO_2 = P * yCO
      PH2_2 = P * yH2
      PCH4_2 = P * yCH4
      PO2_2 = P * yO2
      PN2_2 = P * yN2

      #### CÁLCULO DE LA ENTROPIA TOTAL EN 2 ####

      S_CO2_2 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PCO2_2*1000, 'CO2') #kJ/Kmol-K

      S_CO_2 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PCO_2*1000, 'CO') #kJ/Kmol-K

      S_H2_2 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PH2_2*1000, 'H2') #kJ/Kmol-K

      S_CH4_2 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PCH4_2*1000, 'CH4') #kJ/Kmol-K

      S_O2_2 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PO2_2*1000, 'O2') #kJ/Kmol-K

      S_N2_2 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PN2_2*1000, 'N2') #kJ/Kmol-K

      Sn_CO2_2 = S_CO2_2 * CO2m #kJ/K

      Sn_CO_2 = S_CO_2 * COm #kJ/K

      Sn_H2_2 = S_H2_2 * H2m #kJ/K

      Sn_CH4_2 = S_CH4_2 * CH4m #kJ/K

      Sn_O2_2 = S_O2_2 * (alpha * O2*l) #kJ/K

      Sn_N2_2 = S_N2_2 * (alpha * N2r*l) #kJ/K

      S2 = Sn_CO2_2 + Sn_CO_2 + Sn_H2_2 + Sn_CH4_2 + Sn_O2_2 + Sn_N2_2 #kJ/K
      return S2-S1
    T2_ini = 100 #°C
    T2= fsolve(fun_T2,T2_ini)[0] #°C
    V22 = (Ru*nR*(T2+273.15)) /(P)
    return V22-V2
  P2_ini = 100 #kPa
  P2 = fsolve(fun_P2,P2_ini)[0] #kPa

  def fun_T2(T2):
      return (((Ru * nR * (T2+273.15))) / P2) - V2
  T2 = fsolve(fun_T2, 300)[0]
  #### CALCULO DE LA ENERGIA INTERNA TOTAL EN 2 ####
  PCO2_2 = P2 * yCO2
  PCO_2 = P2 * yCO
  PH2_2 = P2 * yH2
  PCH4_2 = P2 * yCH4
  PO2_2 = P2 * yO2
  PN2_2 = P2 * yN2
  U_CO2_2 = CP.PropsSI('UMOLAR', 'T', T2+273.15, 'P', PCO2_2*1000, 'CO2') #kJ/Kmol

  U_CO_2 = CP.PropsSI('UMOLAR', 'T', T2+273.15, 'P', PCO_2*1000, 'CO') #kJ/Kmol

  U_H2_2 = CP.PropsSI('UMOLAR', 'T', T2+273.15, 'P', PH2_2*1000, 'H2') #kJ/Kmol

  U_CH4_2 = CP.PropsSI('UMOLAR', 'T', T2+273.15, 'P', PCH4_2*1000, 'CH4')#kJ/Kmol

  U_O2_2 = CP.PropsSI('UMOLAR', 'T', T2+273.15, 'P', PO2_2*1000, 'O2') #kJ/Kmol

  U_N2_2 = CP.PropsSI('UMOLAR', 'T', T2+273.15, 'P', PN2_2*1000, 'N2') #kJ/Kmol

  Un_CO2_2 = U_CO2_2 * CO2m #kJ

  Un_CO_2 = U_CO_2 * COm #kJ

  Un_H2_2 = U_H2_2 * H2m #kJ

  Un_CH4_2 = U_CH4_2 * CH4m #kJ

  Un_O2_2 = U_O2_2 * (alpha*O2*l) #kJ

  Un_N2_2 = U_N2_2 * (alpha*N2r*l) #kJ

  U2 = Un_CO2_2 + Un_CO_2 + Un_H2_2 + Un_CH4_2 + Un_O2_2 + Un_N2_2 #kJ
  # ENTROPIA EN 2
  S_CO2_2 = CP.PropsSI('SMOLAR', 'T', T2+273.15, 'P', PCO2_2*1000, 'CO2') #kJ/Kmol

  S_CO_2 = CP.PropsSI('SMOLAR', 'T', T2+273.15, 'P', PCO_2*1000, 'CO') #kJ/Kmol

  S_H2_2 = CP.PropsSI('SMOLAR', 'T', T2+273.15, 'P', PH2_2*1000, 'H2') #kJ/Kmol

  S_CH4_2 = CP.PropsSI('SMOLAR', 'T', T2+273.15, 'P', PCH4_2*1000, 'CH4')#kJ/Kmol

  S_O2_2 = CP.PropsSI('SMOLAR', 'T', T2+273.15, 'P', PO2_2*1000, 'O2') #kJ/Kmol

  S_N2_2 = CP.PropsSI('SMOLAR', 'T', T2+273.15, 'P', PN2_2*1000, 'N2') #kJ/Kmol

  Sn_CO2_2 = S_CO2_2 * CO2m #kJ

  Sn_CO_2 = S_CO_2 * COm #kJ

  Sn_H2_2 = S_H2_2 * H2m #kJ

  Sn_CH4_2 = S_CH4_2 * CH4m #kJ

  Sn_O2_2 = S_O2_2 * (alpha*O2*l) #kJ

  Sn_N2_2 = S_N2_2 * (alpha*N2r) #kJ

  S2 = Sn_CO2_2 + Sn_CO_2 + Sn_H2_2 + Sn_CH4_2 + Sn_O2_2 + Sn_N2_2 #kJ

  Wcomp=(U2-U1)*(Vcilm3/V1)


  #### ESTADO 3 ####
  ####TRABAJAMOS CON PRODUCTOS
  def fun_P3(P):
    def fun_T3(T):
      PCO2_3= P * yCO2_p # kPa # PRESIÓN PARCIAL DEL DIOXIDO DE CARBONO EN LOS PRODUCTOS
      PH20_3 = P * yH20_p # kPa # PRESIÓN PARCIAL DEL MONOXIDO DE CARBONO EN LOS PRODUCTOS
      PO2_3= P * yO2_p # kPa # PRESIÓN PARCIAL DEL OXIGENO EN LOS PRODUCTOS
      PN2_3 = P * yN2_p # kPa # PRESIÓN PARCIAL DEL NITROGENO EN LOS PRODUCTOS
      UCO2_3 = CP.PropsSI('UMOLAR', 'T', T+273.15, 'P', PCO2_3*1000, 'CO2') #kJ/K
      UH20_3 = CP.PropsSI('UMOLAR', 'T', T+273.15, 'P', PH20_3*1000, 'H2O') #kJ/K
      if PO2_3 == 0:
        UO2_3 = 0
      else:
        UO2_3 = CP.PropsSI('UMOLAR', 'T', T+273.15, 'P', PO2_3*1000, 'O2') #kJ/K
      UN2_3 = CP.PropsSI('UMOLAR', 'T', T+273.15, 'P', PN2_3*1000, 'N2') #kJ/K
      Un_CO2_3 = UCO2_3 * a #kJ
      Un_H20_3 = UH20_3 * b #kJ
      Un_O2_3 = UO2_3 * c #kJ
      Un_N2_3 = UN2_3 * d #kJ
      U3 = Un_CO2_3 + Un_H20_3 + Un_O2_3 + Un_N2_3 #kJ

      return U3-U2-Mg*PCI

    T3_ini =400 #°C
    T3= fsolve(fun_T3,T3_ini)[0] #K
    V3 = (Ru*nP*(T3+273.15)) /(P)
    return V3-V2
  P3_ini = 1000 #Pa
  P3 = (fsolve(fun_P3,P3_ini)[0]) #kPa

  def fun_T3(T):
    return ((Ru*nP*(T+273.15))/(P3)) - V2
  T3 = fsolve(fun_T3, 400)[0]
  #### ENERGIA TOTAL EN 3 ####
  PCO2_3= P3 * yCO2_p
  PH20_3 = P3 * yH20_p
  PO2_3= P3 * yO2_p
  PN2_3 = P3 * yN2_p
  UCO2_3 = CP.PropsSI('UMOLAR', 'T', T3+273.15, 'P', PCO2_3*1000, 'CO2') #kJ/kmol
  UH20_3 = CP.PropsSI('UMOLAR', 'T', T3+273.15, 'P', PH20_3*1000, 'H2O') #kJ/kmol
  if PO2_3 == 0:
        UO2_3 = 0
  else:
        UO2_3 = CP.PropsSI('UMOLAR', 'T', T3+273.15, 'P', PO2_3*1000, 'O2') #kJ/K
  UN2_3 = CP.PropsSI('UMOLAR', 'T', T3+273.15, 'P', PN2_3*1000, 'N2') #kJ/kmol
  Un_CO2_3 = UCO2_3 * a #kJ
  Un_H20_3 = UH20_3 * b #kJ
  Un_O2_3 = UO2_3 * c #kJ
  Un_N2_3 = UN2_3 * d #kJ
  U3 = Un_CO2_3 + Un_H20_3 + Un_O2_3 + Un_N2_3 #kJ
  # ENTROPIA EN 3
  SCO2_3 = CP.PropsSI('SMOLAR', 'T', T3+273.15, 'P', PCO2_3*1000, 'CO2') #kJ/K
  if PO2_3 == 0:
        UO2_3 = 0
  else:
    SO2_3 = CP.PropsSI('SMOLAR', 'T', T3+273.15, 'P', PO2_3*1000, 'O2') #kJ/K
  SH20_3 = CP.PropsSI('SMOLAR', 'T', T3+273.15, 'P', PH20_3*1000, 'H2O') #kJ/kmol-K
  if PO2_3 == 0:
        SO2_3 = 0
  else:
        SO2_3 = CP.PropsSI('SMOLAR', 'T', T3+273.15, 'P', PO2_3*1000, 'O2') #kJ/K
  SN2_3 = CP.PropsSI('SMOLAR', 'T', T3+273.15, 'P', PN2_3*1000, 'N2') #kJ/kmol-K
  Sn_CO2_3 = SCO2_3 * a #kJ/K
  Sn_H20_3 = SH20_3 * b #kJ/K
  Sn_O2_3 = SO2_3 * c #kJ
  Sn_N2_3 = SN2_3 * d #kJ/K
  S3 = Sn_CO2_3 + Sn_H20_3 + Sn_O2_3 + Sn_N2_3 #kJ/K
  V3=((Ru*nP*(T3+273.15))/(P3)) #kPa
  #### ESTADO 4 ####

  def fun_P4(P):
    def fun_T4(T):
      PCO2_4= P * yCO2_p
      PH20_4 = P * yH20_p
      PO2_4= P * yO2_p
      PN2_4 = P * yN2_p
      SCO2_4 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PCO2_4*1000, 'CO2') #kJ/kmol-K
      SH20_4 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PH20_4*1000, 'H2O') #kJ/kmol-K
      if PO2_4 == 0:
        SO2_4 = 0
      else:
        SO2_4 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PO2_4*1000, 'O2') #kJ/K
      SN2_4 = CP.PropsSI('SMOLAR', 'T', T+273.15, 'P', PN2_4*1000, 'N2') #kJ/kmol-K
      Sn_CO2_4 = SCO2_4 * a #kJ/K
      Sn_H20_4 = SH20_4 * b #kJ/K
      Sn_O2_4 = SO2_4 * c #kJ
      Sn_N2_4 = SN2_4 * d #kJ/K
      S4 = Sn_CO2_4 + Sn_H20_4 + Sn_O2_4 + Sn_N2_4 #kJ/K
      return S4-S3
    T4_ini =300 #°C
    T4= fsolve(fun_T4,T4_ini)[0] #°C
    V4 = (Ru*nP*(T4+273.15)) /(P)
    return V4-V1
  P4_ini = 100 #kPa
  P4 = (fsolve(fun_P4,P4_ini)[0]) #kPa
  def fun_T4(T):
    return ((Ru*nP*(T+273.15))/(P4)) - V1
  T4 = fsolve(fun_T4, 400)[0]
  #   ENTROPIA 4
  PCO2_4= P4 * yCO2_p #kPa
  PH20_4 = P4 * yH20_p #kPa
  PO2_4= P4 * yO2_p
  PN2_4 = P4 * yN2_p #kPa
  SCO2_4 = CP.PropsSI('SMOLAR', 'T', T4+273.15, 'P', PCO2_4*1000, 'CO2') #kJ/kmol
  SH20_4 = CP.PropsSI('SMOLAR', 'T', T4+273.15, 'P', PH20_4*1000, 'H2O') #kJ/kmol
  if PO2_4 == 0:
        SO2_4 = 0
  else:
        SO2_4 = CP.PropsSI('SMOLAR', 'T', T4+273.15, 'P', PO2_4*1000, 'O2') #kJ/K
  SN2_4 = CP.PropsSI('SMOLAR', 'T', T4+273.15, 'P', PN2_4*1000, 'N2') #kJ/kmol
  Sn_CO2_4 = SCO2_4 * a #kJ
  Sn_H20_4 = SH20_4 * b #kJ
  Sn_O2_4 = SO2_4 * c #kJ
  Sn_N2_4 = SN2_4 * d #kJ
  S4 = Sn_CO2_4 + Sn_H20_4 + Sn_O2_4 + Sn_N2_4 #kJ
  #   ENERGIA 4
  UCO2_4 = CP.PropsSI('UMOLAR', 'T', T4+273.25, 'P', PCO2_4*1000, 'CO2') #kJ/kmol
  if PO2_4 == 0:
        UO2_4 = 0
  else:
        UO2_4 = CP.PropsSI('UMOLAR', 'T', T4+273.15, 'P', PO2_4*1000, 'O2') #kJ/K
  UH20_4 = CP.PropsSI('UMOLAR', 'T', T4+273.25, 'P', PH20_4*1000, 'H2O') #kJ/kmol
  UN2_4 = CP.PropsSI('UMOLAR', 'T', T4+273.25, 'P', PN2_4*1000, 'N2') #kJ/kmol
  Un_CO2_4 = UCO2_4 * a #kJ
  Un_H20_4 = UH20_4 * b #kJ
  Un_O2_4 = UO2_4 * c #kJ
  Un_N2_4 = UN2_4 * d #kJ
  U4 = Un_CO2_4 + Un_H20_4 + Un_O2_4 + Un_N2_4 #kJ
  V4=Ru*nP*(T4+273.15)/(P4)#m3
  #   TRABAJO EXPANSIÓN
  Wexp=(U3-U4)*(Vcilm3/V1)#kJ
  #   TRABAJO NETO
  Wneto = Wexp - Wcomp #kJ
  #EFICIENCIA
  mcil=Mg*(Vcilm3/V1)
  n = Wneto/(mcil*PCI) #%
  # POTENCIA
  Periodo=1/N
  W=Wneto*Ncil/(2*Periodo) #kW

  return [T1, T2, T3, T4, P1, P2, P3, P4, V1, V2, V3, V4, U1, U2, U3, U4, S1, S2, S3, S4, n, W, Wcomp, Wexp, Wneto, Periodo, N]

T1, T2, T3, T4, P1, P2, P3, P4, V1, V2, V3, V4, U1, U2, U3, U4, S1, S2, S3, S4, n, W, Wcomp, Wexp, Wneto, Periodo, N = fun_combustion(1,7,2000)
print("La eficiencia es de: ", round(n,2), "%")
print("La potencia es de: ", round(W,2), "kW")
print("El trabajo de compresión es de: ", round(Wcomp,2), "kJ")
print("El trabajo de expansión es de: ", round(Wexp,2), "kJ")
print("El trabajo neto es de: ", round(Wneto,2), "kJ")

datos = {
          'Estados': [1, 2, 3, 4],
          'T/°C': [round(T1,2), round(T2,2), round(T3,2), round(T4,2)],
          'P/kPa': [round(P1, 2), round(P2, 2), round(P3, 2), round(P4, 2)],
          'U/kJ': [round(U1, 2), round(U2, 2), round(U3, 2), round(U4, 2)],
          'S/kJ/K': [round(S1, 2), round(S2, 2), round(S3, 2), round(S4, 2)],
          'V/m3': [round(V1, 2), round(V2, 2), round(V3, 2), round(V4, 2)],
}
display(pd.DataFrame(datos))

#### Gráfica de eficiencia y potencia desarrollada en función de la relación de compresión en un rango de 2 a 8 (relación de equivalencia igual a 0.8).
rc_lista = np.linspace(2,8,80)
valores1 = [fun_combustion(0.8,rc,2000) for rc in rc_lista]
eficiencias=[valor[20] for valor in valores1]
#### Gráfica de eficiencia y potencia desarrollada en función de la relación de compresión en un rango de 2 a 8 (relación de equivalencia igual a 1.0).
valores2 = [fun_combustion(1,rc,2000) for rc in rc_lista]
eficiencias2=[valor[20] for valor in valores2]
plt.plot(rc_lista,eficiencias2,color='red', label="RE = 1")
plt.plot(rc_lista,eficiencias,color='blue', label="RE = 0.8")
plt.grid()
plt.title(f'Relación de compresión vs Eficiencia del motor con RE = 0.8, 1')
plt.xlabel('Relación de compresión')
plt.ylabel('Eficiencia del motor' )
plt.legend()
plt.show()

potencias=[valor[21]for valor in valores1]
plt.plot(rc_lista,potencias,color='blue',label="RE = 0.8")
potencias2=[valor[21]for valor in valores2]
plt.plot(rc_lista,potencias2,color='red', label="RE = 1")
plt.grid()
plt.title(f'Relación de compresión vs Potencia del motor con RE = 0.8 , 1')
plt.xlabel('Relación de compresión')
plt.ylabel('Potencia del motor [kW]' )
plt.legend()
plt.show()

####Gráfica de temperaturas al finalizar los procesos de compresión y combustión en función de la relación de compresión en un rango de 2 a 8 (relación de equivalencia igual a 0.8).
valores3 = [fun_combustion(0.8,rc,2000) for rc in rc_lista]
temperatura2=[valor[1] for valor in valores3]
valores4 = [fun_combustion(1,rc,2000) for rc in rc_lista]
temperatura21=[valor[1] for valor in valores4]
plt.plot(rc_lista,temperatura21,color='red', label="RE = 1")
plt.plot(rc_lista,temperatura2,color='blue', label="RE = 0.8")

plt.grid()
plt.title(f'Relación de compresión VS Temperatura 2(compresión), RE=0.8 ,1')
plt.xlabel('Relación de compresión')
plt.ylabel('Temperatura 2(compresión)[°C]' )
plt.legend()
plt.show()

temperatura3=[valor[2]for valor in valores3]
temperatura31=[valor[2]for valor in valores4]
plt.plot(rc_lista,temperatura31,color='red', label="RE = 1")
plt.plot(rc_lista,temperatura3,color='blue', label="RE = 0.8")

plt.grid()
plt.title(f'Relación de compresión VS Temperatura 3(combustión), RE=0.8,1')
plt.xlabel('Relación de compresión')
plt.ylabel('Temperatura 3(combustión)[°C]' )
plt.legend()
plt.show()

#### Gráfica de eficiencia y potencia desarrollada en función de la relación de compresión en un rango de 2 a 8 (relación de equivalencia igual a 0.8).
rpm_lista = np.linspace(1000,6000,100)
valores5 = [fun_combustion(0.8,11.5,rpm) for rpm in rpm_lista]
potencias5=[valor[21] for valor in valores5]
#### Gráfica de eficiencia y potencia desarrollada en función de la relación de compresión en un rango de 2 a 8 (relación de equivalencia igual a 1.0).
valores6 = [fun_combustion(1,11.5,rpm) for rpm in rpm_lista]
potencias6=[valor[21] for valor in valores6]
plt.plot(rpm_lista,potencias6,color='red', label="RE = 1")
plt.plot(rpm_lista,potencias5,color='blue', label="RE = 0.8")
plt.grid()
plt.title(f'Velocidad de giro vs Potencia del motor con RE = 0.8, 1')
plt.xlabel('Revoluciones por minuto')
plt.ylabel('Potencia del motor [kW]' )
plt.legend()
plt.show()